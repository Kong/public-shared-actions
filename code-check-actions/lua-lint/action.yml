name: Luacheck
description: Static analysis of Lua
author: 'Kong'
inputs:
  additional_args:
    description: 'Arguments for Luacheck'
    required: false
    default: '' # Scans workspace dir
  files:
    description: 'List of files, directories and rockspecs to check'
    required: false
    default: '.' # Scans workspace dir
  action_fail:
    description: 'Action itself will fail if linting fails'
    required: false
    default: false
  print_results:
    description: 'Print Luacheck results'
    required: false
    default: 'false'

runs:
  using: composite
  steps:

    - name: Run Luacheck for static analysis
      uses: lunarmodules/luacheck@ababb6d403d634eb74d2c541035e9ede966e710d
      continue-on-error: true
      with:
        args: "${{ inputs.additional_args }} --codes --ranges --formatter JUnit -q ${{ inputs.files }} > luacheck_${{github.sha}}.xml"

    - name: Upload results to workflow
      if: always()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: luacheck_results.zip
        path: |
          luacheck_${{github.sha}}.xml
        if-no-files-found: warn

    - name: Print Luacheck results
      shell: bash
      run: |
        cat luacheck_${{github.sha}}.xml
      if: inputs.print_results != 'false'

    # when using the regular GITHUB_TOKEN, the check-run created by this step will be assigned to a
    # random workflow in the GH UI. to prevent this, we can force the check-run to be created in a separate
    # check-suite, which is created automatically if we use the credentials of a GitHub App
    # Ref: https://github.com/EnricoMi/publish-unit-test-result-action/issues/181
    # Publishing: https://github.com/EnricoMi/publish-unit-test-result-action#publishing-test-results
    - name: Luacheck Report
      uses: EnricoMi/publish-unit-test-result-action@170bf24d20d201b842d7a52403b73ed297e6645b # v2
      if: always() && github.actor != 'dependabot[bot]'
      with:
        files: |
          luacheck_${{github.sha}}.xml
        check_name: Luacheck Report
        comment_mode: always
        action_fail: ${{ inputs.action_fail }}
        # Explicitly don't fail reporting check based on test results if `inputs.action_fail` is `false`.
        fail_on: ${{ inputs.action_fail && 'test failures' || 'nothing' }}

