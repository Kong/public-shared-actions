name:  Rust Source Code Lints
description: Rust linting and SCA using grype on specified rust source code
author: 'Kong'
inputs:
  asset_prefix:
    description: 'prefix for generated artifacts'
    required: false
    default: ''
  dir: 
    description: 'Speicify a directory to be checked and scanned'
    required: false
    default: '.'
  fail_build:
    description: 'fail the build if the vulnerability is above the severity cutoff'
    required: false
    default: false
    type: choice
    options:
    - 'true'
    - 'false'
  token:
    description: 'A Github PAT'
    required: true

outputs:
  grype-json-report:
    description: 'vulnerability json report'
    value: ${{ steps.grype_analysis.outputs.json }}
  grype-sarif-report:
    description: 'vulnerability sarif report'
    value: ${{ steps.grype_analysis.outputs.sarif }}
  sbom-spdx-report:
    description: 'SBOM spdx report'
    value: ${{ steps.meta.outputs.sbom_spdx_file }}
  sbom-cyclonedx-report:
    description: 'SBOM cyclonedx report'
    value: ${{ steps.meta.outputs.sbom_cyclonedx_file }}

runs:
  using: composite
  steps:
  
    - uses: actions-rs/toolchain@b2417cde72dcf67f306c0ae8e0828a81bf0b189f
      with:
        profile: default
        toolchain: stable
        components: rustfmt, clippy

    - name: Set Scan Job Metadata
      shell: bash
      id: meta
      env:
        DIR: ${{ inputs.dir }}
        FILE: ${{ inputs.file }}
        ASSET_PREFIX: ${{ inputs.asset_prefix }}
      run: $GITHUB_ACTION_PATH/scripts/scan-metadata.sh
    
     # fails with an error code / succeeds
    # - uses: actions-rs/cargo@v1
    #   continue-on-error: true
    #   with:
    #     command: "fmt"
    #     args: "--all --manifest-path ${{ steps.meta.outputs.lint_path }}"

    # fails with an error code / succeeds
    # Run as part of clippy
    # - uses: actions-rs/cargo@v1
    #   continue-on-error: true
    #   with:
    #     command: check
    #     args: "--manifest-path ${{ steps.meta.outputs.lint_path }}"

    # fail on any correctness lint groups 
    # always warn other lint groups
    - uses: actions-rs/cargo@ae10961054e4aa8b4aa7dffede299aaf087aa33b
      continue-on-error: true
      with:
        command: clippy # Runs all default clippy::all lints for warn mode
        args: "--manifest-path ${{ steps.meta.outputs.lint_path }} -- -D clippy::correctness -W clippy::all -W clippy::cargo -W clippy::pedantic"

    # - uses: auguwu/clippy-action@1.1.0
    #   with:
    #     token: ${{ inputs.token }}
    #     working-directory: ${{ steps.meta.outputs.lint_path }}
    #     warn: "all,cargo,pedantic"
    #     deny: "correctness"
    #     forbid: "restriction,nursery"

    # Must upload artifact for output file parameter to have effect
    - name: Generate SPDX SBOM Using Syft
      uses: anchore/sbom-action@v0.14.3
      id: sbom_spdx
      with:
        image: ${{ steps.meta.outputs.scan_image }}
        registry-username: ${{ inputs.registry_username }}
        registry-password: ${{ inputs.registry_password }}
        path: ${{ steps.meta.outputs.scan_dir }}
        file: ${{ steps.meta.outputs.scan_file }}
        format: spdx-json
        artifact-name: ${{ steps.meta.outputs.sbom_spdx_file }}
        output-file: ${{ steps.meta.outputs.sbom_spdx_file }}
        upload-artifact: true
        upload-release-assets: false
        dependency-snapshot: false

    - name: Generate CycloneDX SBOM Using Syft
      uses: anchore/sbom-action@v0.14.3
      id: sbom_cyclonedx
      with:
        image: ${{ steps.meta.outputs.scan_image }}
        registry-username: ${{ inputs.registry_username }}
        registry-password: ${{ inputs.registry_password }} 
        path: ${{ steps.meta.outputs.scan_dir }}
        file: ${{ steps.meta.outputs.scan_file }}
        format: cyclonedx-json
        artifact-name: ${{ steps.meta.outputs.sbom_cyclonedx_file }}
        output-file: ${{ steps.meta.outputs.sbom_cyclonedx_file }}
        upload-artifact: true
        upload-release-assets: false
        dependency-snapshot: false
    
    - name: Check SBOM files existence
      uses: andstor/file-existence-action@v2
      id: sbom_report
      with:
        files: "${{ steps.meta.outputs.sbom_spdx_file }}, ${{ steps.meta.outputs.sbom_cyclonedx_file }}"
        fail: true
    
    # Don't fail during report generation
    - name: Vulnerability analysis of SBOM
      uses: anchore/scan-action@v3.3.5
      id: grype_analysis_sarif
      if: ${{ steps.sbom_report.outputs.files_exists == 'true' }}
      with:
        sbom: ${{ steps.meta.outputs.sbom_spdx_file }}
        output-format: sarif
        fail-build: 'false'
        severity-cutoff: ${{ steps.meta.outputs.global_severity_cutoff }}

    # Don't fail during report generation
    # JSON format will report  any ignored rules
    - name: Vulnerability analysis of SBOM
      uses: anchore/scan-action@v3.3.5
      id: grype_analysis_json
      if: ${{ steps.sbom_report.outputs.files_exists == 'true' }}
      with:
        sbom: ${{ steps.meta.outputs.sbom_spdx_file }}
        output-format: json
        fail-build: 'false'
        severity-cutoff: ${{ steps.meta.outputs.global_severity_cutoff }}
    
    - name: Check vulnerability analysis report existence
      uses: andstor/file-existence-action@v2
      id: grype_report
      with:
        files: "${{ steps.grype_analysis_sarif.outputs.sarif }}, ${{ steps.grype_analysis_json.outputs.json }}"
        fail: true
    
    # Grype CVE Action generates an ./results.sarif or ./results.report and no way to customize output file name
    # Hack to increase readability of grype artifacts attached to workflows and releases
    - name: Rename grype analysis report
      shell: bash
      run: |
        mv ${{ steps.grype_analysis_sarif.outputs.sarif }} ${{ steps.meta.outputs.grype_sarif_file }}
        mv ${{ steps.grype_analysis_json.outputs.json }} ${{ steps.meta.outputs.grype_json_file }}
    
    - name: Upload grype analysis report
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.meta.outputs.grype_sarif_file }}
        path: |
          ${{ steps.meta.outputs.grype_sarif_file }}
        if-no-files-found: warn 
    
    # Upload grype cve reports
    - name: Upload grype analysis report
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.meta.outputs.grype_json_file }}
        path: |
          ${{ steps.meta.outputs.grype_json_file }}
        if-no-files-found: warn

    # Fail based on severity and input parameters
    # Notify grype quick scan results in table format
    # Table format will supress any specified ignore rules
    - name: Inspect Vulnerability analysis of SBOM
      uses: anchore/scan-action@v3.3.5
      if: ${{ steps.sbom_report.outputs.files_exists == 'true' }}
      with:
        sbom: ${{ steps.meta.outputs.sbom_spdx_file }}
        output-format: table
        fail-build: ${{ steps.meta.outputs.global_enforce_build_failure == 'true' && steps.meta.outputs.global_enforce_build_failure || inputs.fail_build }}
        severity-cutoff: ${{ steps.meta.outputs.global_severity_cutoff }}
