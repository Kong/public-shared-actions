name:  Rust Source Code Lints
description: Rust linting and SCA using grype on specified rust source code
author: 'Kong'
inputs:
  asset_prefix:
    description: 'prefix for generated artifacts'
    required: false
    default: ''
  dir: 
    description: 'Speicify a scan directory that must contain cargo.lock and cargo.toml'
    required: false
    default: '.'
  fail_build:
    description: 'fail the build if the vulnerability is above the severity cutoff'
    required: false
    default: false
    type: choice
    options:
    - 'true'
    - 'false'
  token: 
    description: 'Github token to annotate files with findings'
    required: true

outputs:
  grype-json-report:
    description: 'vulnerability json report'
    value: ${{ steps.grype_analysis.outputs.json }}
  grype-sarif-report:
    description: 'vulnerability sarif report'
    value: ${{ steps.grype_analysis.outputs.sarif }}

runs:
  using: composite
  steps:
  
    - uses: actions-rs/toolchain@b2417cde72dcf67f306c0ae8e0828a81bf0b189f
      with:
        toolchain: stable
        components: clippy

    - name: Set Scan Job Metadata
      shell: bash
      id: meta
      env:
        DIR: ${{ inputs.dir }}
        ASSET_PREFIX: ${{ inputs.asset_prefix }}
      run: $GITHUB_ACTION_PATH/scripts/scan-metadata.sh
    
    - uses: Swatinem/rust-cache@v1

    # - uses: actions-rs/cargo@ae10961054e4aa8b4aa7dffede299aaf087aa33b
    #   continue-on-error: true
    #   with:
    #     command: install
    #     args: "clippy-sarif sarif-fmt"

    # - name: Run Cargo Clippy
    #   shell: bash
    #   continue-on-error: true
    #   run: |
    #     cargo clippy --manifest-path ${{ steps.meta.outputs.manifest_path }} --message-format=json -- -W clippy::correctness -W clippy::cargo -W clippy::pedantic | clippy-sarif | tee rust_clippy_${{github.sha}}.sarif | sarif-fmt

    # - name: Upload Rust Linting SARIF file to CodeQL
    #   if: ${{ github.event.repository.visibility == 'public' }}
    #   uses: github/codeql-action/upload-sarif@v2
    #   with:
    #     sarif_file: rust_clippy_${{github.sha}}.sarif
    #     category: clippy_rust

    - uses: actions-rs/clippy-check@v1
      continue-on-error: true
      with:
        token: ${{ inputs.token }}
        args: --manifest-path ${{ steps.meta.outputs.manifest_path }} -- -W clippy::correctness -W clippy::cargo -W clippy::pedantic
        name: Rust Clippy Report
   
    # - name: Upload Rust Linting results to workflow
    #   if: always()
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: rust_clippy_results.sarif
    #     path: |
    #       rust_clippy_${{github.sha}}.sarif
    #     if-no-files-found: warn 
    
    # Don't fail during report generation
    - name: Vulnerability analysis of SBOM
      uses: anchore/scan-action@v3.3.5
      continue-on-error: true
      id: scan
      with:
        path: ${{ steps.meta.outputs.scan_dir }}
        output-format: sarif
        fail-build: 'false'
        severity-cutoff: ${{ steps.meta.outputs.global_severity_cutoff }}
        add-cpes-if-none: true
    
    - name: Upload SARIF CVE analysis file to CodeQL
      if: ${{ always() && github.event.repository.visibility == 'public' }}
      continue-on-error: true
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}
        category: sca_rust
    
    # Grype CVE Action generates an ./results.sarif or ./results.report and no way to customize output file name
    # Hack to increase readability of grype artifacts attached to workflows and releases
    - name: Rename grype analysis report
      shell: bash
      run: |
        mv ${{ steps.scan.outputs.sarif }} ${{ steps.meta.outputs.grype_sarif_file }}

    - name: Upload grype analysis report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.meta.outputs.grype_sarif_file }}
        path: |
          ${{ steps.meta.outputs.grype_sarif_file }}
        if-no-files-found: warn

    # Fail based on severity and input parameters
    # Notify grype quick scan results in table format
    # Table format will supress any specified ignore rules
    - name: Vulnerability Report
      uses: anchore/scan-action@v3.3.5
      with:
        path: ${{ steps.meta.outputs.scan_dir }}
        output-format: table
        fail-build: ${{ steps.meta.outputs.global_enforce_build_failure == 'true' && steps.meta.outputs.global_enforce_build_failure || inputs.fail_build }}
        severity-cutoff: ${{ steps.meta.outputs.global_severity_cutoff }}

    # # Rust Clippy - Linting report
    # - name:  Rust Linting Report - SARIF
    #   shell: bash
    #   run: |
    #     cat rust_clippy_${{github.sha}}.sarif
