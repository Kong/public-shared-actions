name: Cleanup PR preview packages
description: Deprecate and unpublish PR preview package versions for closed PRs
inputs:
  package:
    description: Package to cleanup PR versions
    required: true
  openPRs:
    description: List of open PRs in the repo


runs:
  using: composite
  steps:
    - name: Get PR Info
      shell: bash
      run: |
        pkgName=${{ inputs.package }}
        openPRs=${{ inputs.openPRs }}

        echo " "
        echo "package: ${pkgName}"
        echo "openPRs: ${openPRs}"

        current=1
        canDelete="true"

        # get the list of the "-pr." published version for the packages
        pkgDetails=$(npm view "${pkgName}" --json)
        prVersions=($(echo ${pkgDetails}| jq -r '.versions' | grep '\-pr.'| tac | sed 's/[,\"]//g'))
        if [[ -z "${prVersions}" ]]; then
          echo "No preview versions found, exiting..."
          exit 0
        fi

        distTags=$(echo ${pkgDetails}|jq -r '."dist-tags"')

        total="${#prVersions[@]}"

        for verToRemove in "${prVersions[@]}"
        do
          echo " "
          echo "$((current++))/${total}"

          verDetails=$(npm view "${pkgName}@${verToRemove}" --json)

          # validate that the version doesn't belong to open PR
          echo "${pkgName}@${verToRemove}"
          prNumber=$(echo ${verToRemove} | sed 's/.*\-pr\.//g'| cut -d'.' -f 1)

          if [[ ! -z $(echo ${openPRs} | grep "\"${prNumber}\"") ]]; then
            if [[ ! -z $(echo ${distTags}|grep "${verToRemove}") ]]; then
              echo "${pkgName}@${verToRemove}: belongs to open PR and tagged as PR preview, skip..."
              continue
            fi
          fi

          if [[ $(echo ${verDetails}|jq -r ".deprecated") == null ]]; then
            if [[ ! -z $(echo ${distTags}|grep "${verToRemove}") ]]; then
              # remove dist tag if present
              echo "${pkgName}@${verToRemove}: remove dist tag"
              npm dist-tag rm "${pkgName}" "pr-${prNumber}" || true
            fi

            # deprecate and unpublish version, ignore error
            echo "*** deprecating: ${pkgName}@${verToRemove}"
            res=$(npm deprecate "${pkgName}@${verToRemove}" "Deprecated PR preview" 2>&1 || true)
            echo "deprecate:>>>>${res}<<<<"
            if [[ ! -z $(echo "${res}"|grep " E429") ]]; then
              echo "Rate limit reached, exiting..."
              exit 1
            fi

          else
              echo "*** ${pkgName}@${verToRemove}: already deprecated, skip..."
          fi

          if [[ "${canDelete}" == "true" ]]; then
            echo "*** unpublishing: ${pkgName}@${verToRemove}"
            res=$(npm unpublish --force "${pkgName}@${verToRemove}" 2>&1 || true)
            echo "unpublish:>>>>>${res}<<<<"
            if [[ ! -z $(echo "${res}"|grep " E429") ]]; then
              echo "Rate limit reached, exiting..."
              exit 1
            fi

            # NPMJS does not allow to delete specific version if
            # any other version of the package is dependant of other package.
            # So we wont try to unpublish if we detect 405 response once
            if [[ ! -z $(echo "${res}"|grep " E405") ]]; then
              echo "error 405 detected, skip unpublish attempts..."
              canDelete="false"
            fi
          else
            echo "unpublish skipped ..."
          fi

        done
