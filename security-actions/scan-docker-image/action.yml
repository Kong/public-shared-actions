name: Scan Docker Image
description: Generates SBOM and vulnerabiity report on specified docker image
author: 'Kong'
inputs:
  asset_prefix:
    description: 'prefix for generated scan artifacts'
    required: false
    default: ''
  dir:
    description: 'Speicify a directory to be scanned. This is mutually exclusive to file and image'
    required: false
    default: ''
  file:
    description: 'Specify a file to be scanned. This is mutually exclusive to dir and image'
    required: false
    default: ''
  image:
    description: 'specify an image to be scanned. Specify registry credentials if the image is remote. Takes priority over dir and file'
    required: false
    default: ''
  tag:
    description: 'specify a docker image tag / release tag / ref to be scanned'
    required: false
    default: ''
  registry_username:
    description: 'docker username to login against private docker registry'
    required: false
  registry_password:
    description: 'docker password to login against private docker registry'
    required: false
  fail_build:
    description: 'fail the build if the vulnerability is above the severity cutoff'
    required: false
    default: false
    type: choice
    options:
    - 'true'
    - 'false'

outputs:
  cis-json-report:
    description: 'docker-cis json report'
    value: ${{ steps.meta.outputs.cis_json_file }}
  grype-json-report:
    description: 'vulnerability json report'
    value: ${{ steps.grype_analysis.outputs.json }}
  grype-sarif-report:
    description: 'vulnerability sarif report'
    value: ${{ steps.grype_analysis.outputs.sarif }}
  sbom-spdx-report:
    description: 'SBOM spdx report'
    value: ${{ steps.meta.outputs.sbom_spdx_file }}
  sbom-cyclonedx-report:
    description: 'SBOM cyclonedx report'
    value: ${{ steps.meta.outputs.sbom_cyclonedx_file }}

runs:
  using: composite
  steps:

    - name: Set Scan Job Metadata
      shell: bash
      id: meta
      env:
        IMAGE: ${{ inputs.image }}
        TAG: ${{ inputs.tag }}
        DIR: ${{ inputs.dir }}
        FILE: ${{ inputs.file }}
        ASSET_PREFIX: ${{ inputs.asset_prefix }}
      run: $GITHUB_ACTION_PATH/scripts/scan-metadata.sh

    # Must upload artifact for output file parameter to have effect
    - name: Generate SPDX SBOM Using Syft
      uses: anchore/sbom-action@v0.15.3
      id: sbom_spdx
      with:
        image: ${{ steps.meta.outputs.scan_image }}
        registry-username: ${{ inputs.registry_username }}
        registry-password: ${{ inputs.registry_password }}
        path: ${{ steps.meta.outputs.scan_dir }}
        file: ${{ steps.meta.outputs.scan_file }}
        format: spdx-json
        artifact-name: ${{ steps.meta.outputs.sbom_spdx_file }}
        output-file: ${{ steps.meta.outputs.sbom_spdx_file }}
        upload-artifact: true
        upload-release-assets: false
        dependency-snapshot: false

    - name: Generate CycloneDX SBOM Using Syft
      uses: anchore/sbom-action@v0.15.3
      id: sbom_cyclonedx
      with:
        image: ${{ steps.meta.outputs.scan_image }}
        registry-username: ${{ inputs.registry_username }}
        registry-password: ${{ inputs.registry_password }}
        path: ${{ steps.meta.outputs.scan_dir }}
        file: ${{ steps.meta.outputs.scan_file }}
        format: cyclonedx-json
        artifact-name: ${{ steps.meta.outputs.sbom_cyclonedx_file }}
        output-file: ${{ steps.meta.outputs.sbom_cyclonedx_file }}
        upload-artifact: true
        upload-release-assets: false
        dependency-snapshot: false

    - name: Check SBOM files existence
      uses: andstor/file-existence-action@v2
      id: sbom_report
      with:
        files: "${{ steps.meta.outputs.sbom_spdx_file }}, ${{ steps.meta.outputs.sbom_cyclonedx_file }}"
        fail: true

    # Don't fail during report generation
    - name: Vulnerability analysis of SBOM
      uses: anchore/scan-action@v3.3.6
      id: grype_analysis_sarif
      if: ${{ steps.sbom_report.outputs.files_exists == 'true' }}
      with:
        sbom: ${{ steps.meta.outputs.sbom_spdx_file }}
        output-format: sarif
        fail-build: 'false'
        add-cpes-if-none: true
        severity-cutoff: ${{ steps.meta.outputs.global_severity_cutoff }}

    # Don't fail during report generation
    # JSON format will report  any ignored rules
    - name: Vulnerability analysis of SBOM
      uses: anchore/scan-action@v3.3.6
      id: grype_analysis_json
      if: ${{ steps.sbom_report.outputs.files_exists == 'true' }}
      with:
        sbom: ${{ steps.meta.outputs.sbom_spdx_file }}
        output-format: json
        fail-build: 'false'
        add-cpes-if-none: true
        severity-cutoff: ${{ steps.meta.outputs.global_severity_cutoff }}

    - name: Check vulnerability analysis report existence
      uses: andstor/file-existence-action@v2
      id: grype_report
      with:
        files: "${{ steps.grype_analysis_sarif.outputs.sarif }}, ${{ steps.grype_analysis_json.outputs.json }}"
        fail: true

    # Grype CVE Action generates an ./results.sarif or ./results.report and no way to customize output file name
    # Hack to increase readability of grype artifacts attached to workflows and releases
    - name: Rename grype analysis report
      shell: bash
      run: |
        mv ${{ steps.grype_analysis_sarif.outputs.sarif }} ${{ steps.meta.outputs.grype_sarif_file }}
        mv ${{ steps.grype_analysis_json.outputs.json }} ${{ steps.meta.outputs.grype_json_file }}

    - name: Upload grype analysis report
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.meta.outputs.grype_sarif_file }}
        path: |
          ${{ steps.meta.outputs.grype_sarif_file }}
        if-no-files-found: warn

    # Upload grype cve reports
    - name: Upload grype analysis report
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.meta.outputs.grype_json_file }}
        path: |
          ${{ steps.meta.outputs.grype_json_file }}
        if-no-files-found: warn

    - name: Check docker OCI tar existence
      uses: andstor/file-existence-action@v2
      id: docker_tar
      with:
        files: "${{ steps.meta.outputs.scan_image }}"

    - name: Generate docker-cis JSON report
      uses: docker://ghcr.io/aquasecurity/trivy:0.37.2
      id: cis_json
      with:
        entrypoint: trivy
        args: "image ${{ env.input }} ${{ steps.meta.outputs.scan_image }} --compliance ${{ env.compliance }} -f json --severity ${{ env.severity }} --ignore-unfixed -o ${{ steps.meta.outputs.cis_json_file }}"
      env:
        compliance: docker-cis
        severity: ${{ steps.meta.outputs.global_severity_cutoff }}
        input: ${{ steps.docker_tar.outputs.files_exists == 'true' && '--input' || '' }}

    - name: upload docker-cis JSON report
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.meta.outputs.cis_json_file }}
        path: |
          ${{ steps.meta.outputs.cis_json_file }}
        if-no-files-found: warn

    # Fail based on severity and input parameters
    # Notify grype quick scan results in table format
    # Table format will supress any specified ignore rules
    - name: Inspect Vulnerability analysis of SBOM
      uses: anchore/scan-action@v3.3.6
      if: ${{ steps.sbom_report.outputs.files_exists == 'true' }}
      with:
        sbom: ${{ steps.meta.outputs.sbom_spdx_file }}
        output-format: table
        fail-build: ${{ steps.meta.outputs.global_enforce_build_failure == 'true' && steps.meta.outputs.global_enforce_build_failure || inputs.fail_build }}
        add-cpes-if-none: true
        severity-cutoff: ${{ steps.meta.outputs.global_severity_cutoff }}

    - name: Inspect docker-cis report
      uses: docker://ghcr.io/aquasecurity/trivy:0.37.2
      with:
        entrypoint: trivy
        args: "image ${{ env.input }} ${{ steps.meta.outputs.scan_image }} --compliance ${{ env.compliance }} -f table --severity ${{ env.severity }} --ignore-unfixed --exit-code ${{ env.exit-code }}"
      env:
        exit-code: ${{ (steps.meta.outputs.global_enforce_build_failure == 'true' || inputs.fail_build == 'true') && '1' || '0' }}
        compliance: docker-cis
        severity: ${{ steps.meta.outputs.global_severity_cutoff }}
        input: ${{ steps.docker_tar.outputs.files_exists == 'true' && '--input' || '' }}
