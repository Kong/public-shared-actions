name: Sign Docker Image
description: Keyeless Image signing with transaprency and uploads to registry for specified docker image
author: 'Kong'
inputs:
  local_save_cosign_assets:
    description: 'Save cosign output assets locally on disk. Ex: certificate and signature of signed artifacts'
    required: false
    default: false
  cosign_output_prefix:
    description: 'cosign file prefix for storing local signatures and certificates. Works when input local_save_cosign_assets is enabled'
    required: false
    default: ''
  signature_registry:
    description: 'Separate signature repository to store image signature to avoid polluting image repository'
    required: false
    default: ''
  tags:
    description: 'Comma separated <image>:<tag> that have same digest'
    required: true
  image_digest:
    description: 'specify single sha256 digest associated with the specified image_registries'
    required: true
  registry_username:
    description: 'username to login against private image registry'
    required: false
  registry_password:
    description: 'password to login against private image registry'
    required: false
  image_registry_domain:
    description: 'image registry domain'
    required: false
    default: 'docker.io'
  signature_registry_username:
    description: 'username to login to publish image signatures to separate signature registry'
    required: false
  signature_registry_password:
    description: 'password to login to publish image signatures to separate signature registry'
    required: false
  signature_registry_domain:
    description: 'signature registry domain for images'
    required: false
    default: 'docker.io'

#outputs:
  # sbom-cyclonedx-report:
  #   description: 'SBOM cyclonedx report'
  #   value: ${{ steps.meta.outputs.sbom_cyclonedx_file }}

runs:
  using: composite
  steps:

    - name: Set Cosign metadata
      shell: bash
      id: meta
      env:
        LOCAL_SAVE_COSIGN_ASSETS: ${{ inputs.local_save_cosign_assets }}
        ASSET_PREFIX: ${{ inputs.cosign_output_prefix }}
      run: $GITHUB_ACTION_PATH/scripts/cosign-metadata.sh
    
    - name: Install Cosign
      uses: sigstore/cosign-installer@d7d6bc7722e3daa8354c50bcb52f4837da5e9b6a

    - name: Check install!
      shell: bash
      run: cosign version
    
    - name: Setup image namespace for signing, strip off the tag
      shell: bash
      env: 
        INPUT_TAGS: ${{ inputs.tags }}
      run: |
        set -euox pipefail

        TAGS="${INPUT_TAGS//,/ }"

        IMAGE_REPOS=$(for tag in \
          `echo "${TAGS}"`; do
          echo -n "${tag}" | awk -F ":" '{print $1}' -;done|sort -u)
        
          echo $IMAGE_REPOS

          echo 'IMAGES<<EOF' >> $GITHUB_ENV
          echo $IMAGE_REPOS >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

    # By default cosign publishes image signatures alongside image repositories in the same registry
    # This step is needed for pulling image from / pushing image sig to private registry
    - name: Login to Image Registry - ${{ inputs.image_registry_domain }}
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
      if: ${{ inputs.registry_username != '' && inputs.registry_password != '' }}
      with:
        registry: ${{ inputs.image_registry_domain }}
        username: ${{ inputs.registry_username }}
        password: ${{ inputs.registry_password }}
    
    # This step runs if signature registry is different from image registry
    - name: Login to Signature Registry - ${{ inputs.signature_registry_domain }}
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
      if: ${{ inputs.signature_registry_username != '' && inputs.signature_registry_password != '' }}
      with:
        registry: ${{ inputs.signature_registry_domain }}
        username: ${{ inputs.signature_registry_username }}
        password: ${{ inputs.signature_registry_password }}

    - name: Sign the images with GitHub OIDC Token 
      id: sign
      env:
        COSIGN_REPOSITORY: ${{ inputs.signature_registry }}
        COSIGN_ARGS: ${{ steps.meta.outputs.cosign_signing_args}}
        IMAGE_REGISTRIES: ${{ env.IMAGES }} # Space separated image registries that have same digest
        IMAGE_DIGEST: ${{ inputs.image_digest }} # Single Digest associated with the registry images 
      shell: bash
      run: |
        set -euox pipefail
        for img in $IMAGES; do
          cosign sign ${{ env.COSIGN_ARGS }} \
          -a "repo=${{ github.repository }}" \
          -a "workflow=${{ github.workflow }}" \
          -a "sha=${{ github.sha }}" \
          --oidc-provider=github-actions \
          --oidc-issuer=https://token.actions.githubusercontent.com \
          "$img"@${{ env.IMAGE_DIGEST }}
        done

     # Upload Cosign Artifacts (public cert and signatures)
     # Uploaded artifact name must be unique across each workflow run / job
    - name: Upload Cosign Artifacts
      uses: actions/upload-artifact@v4
      if: ${{ inputs.local_save_cosign_assets == 'true' && inputs.cosign_output_prefix != '' }}
      with:
        name: signed-image-assets-${{inputs.cosign_output_prefix}}
        path: |
          ${{inputs.cosign_output_prefix}}*.crt
          ${{inputs.cosign_output_prefix}}.sig*
        if-no-files-found: warn
